/*-----------------------------------------------------------------------------------
    Template Name: Getlinked
    Template URI: https://github.com/theolawalemi
    Description: Igniting a revolution in HR innovation.
    Author: Olwalemi
    Author URI: https://github.com/theolawalemi
    Version: 1.0
-----------------------------------------------------------------------------------*/
// Navbar background
const toggler = document.querySelector(".navbar-toggler");
const navbar = document.querySelector(".navbar");
const [navbarOpen, navbarClose] = document.querySelectorAll(".navbar-open, .navbar-close");
navbarClose.style.display = "none";
toggler.addEventListener("click", () => {
    navbar.classList.toggle("navbar-bg");
    navbarOpen.style.display = navbarOpen.style.display === "none" ? "inline-block" : "none";
    navbarClose.style.display = navbarClose.style.display === "none" ? "inline-block" : "none";
});

// Heading text animation
const resolver = {
    resolve(options, callback) {
        const resolveString = options.resolveString || options.element.getAttribute('data-heading');
        const combinedOptions = { ...options, resolveString };
        const getRandomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
        const randomCharacter = (characters) => characters[getRandomInteger(0, characters.length - 1)];
        const imageElement = document.querySelector('.hero-curve');
        imageElement.style.transition = 'all 0.3s ease-in-out';
        const doRandomiserEffect = (options, callback) => {
            const { characters, timeout, element, partialString, iterations } = options;
            setTimeout(() => {
                if (iterations >= 0) {
                    const nextOptions = { ...options, iterations: iterations - 1 };
                    element.textContent = (iterations === 0) ? partialString : partialString.slice(0, -1) + randomCharacter(characters);
                    doRandomiserEffect(nextOptions, callback);
                } else if (typeof callback === "function") {
                    callback();
                }
            }, timeout);
        };
        const doResolverEffect = (options, callback) => {
            const { resolveString, characters, offset } = options;
            const partialString = resolveString.substring(0, offset);
            const combinedOptions = { ...options, partialString };
            doRandomiserEffect(combinedOptions, () => {
                const nextOptions = { ...options, offset: offset + 1 };
                if (offset <= resolveString.length) {
                    doResolverEffect(nextOptions, callback);
                    imageElement.style.display = 'none';
                } else if (typeof callback === "function") {
                    setTimeout(() => {
                        imageElement.style.display = 'block';
                        callback();
                    }, 300);
                }
            });
        };
        doResolverEffect(combinedOptions, callback);
    },
};

const strings = ['Igniting a Revolution in HR Innovation'];
let counter = 0;
const options = {
    offset: 0,
    timeout: 10,
    iterations: 10,
    characters: 'abcdefghijklmnopqrstuvwxyz#%&-+_/\\='.split(''),
    resolveString: strings[counter],
    element: document.querySelector('[data-heading]'),
};
const callback = () => {
    setTimeout(() => {
        counter = (counter + 1) % strings.length;
        const nextOptions = { ...options, resolveString: strings[counter] };
        resolver.resolve(nextOptions, callback);
    }, 10000);
};
resolver.resolve(options, callback);

// Hero section animation
gsap.registerPlugin('random');

const hero = gsap.timeline({ delay: 1, repeat: -1, yoyo: true });
hero.from(".header .navbar-brand", {
    duration: 1,
    opacity: 0,
    y: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
hero.from(".header .nav-link", {
    duration: 1,
    opacity: 0,
    x: -100,
    ease: "power2.inOut",
    stagger: {
        each: 0.25,
        from: "start"
    }
});
hero.from(".header .btn-navbar", {
    duration: 1,
    opacity: 0,
    x: 50,
    ease: "power2.inOut",
}, "<");
hero.from(".hero-italic", {
    duration: 1,
    opacity: 0,
    ease: "power2.inOut"
}, 1);
hero.from(".hero-heading, .hero-bulb, .hero-chain, .hero-fire, .hero-text, .hero-btn, .hours, .minutes, .seconds", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut",
}, 0);
hero.to(".hero-bulb", {
    keyframes: [
        { x: 0, y: 0 },
        { x: 0, y: 15 },
        { x: 0, y: 0 }
    ],
    repeat: -1,
    duration: 3,
    ease: "power1.inOut"
});
gsap.fromTo(".hero-object", { opacity: 0 }, {
    opacity: 1,
    duration: 1.5,
    ease: "power2.inOut",
    delay: 1
});
const galaxy = gsap.to(".hero-galaxy", {
    rotation: 360,
    duration: 10,
    repeat: -1,
    ease: "linear",
    delay: 4
});
const galaxyElement = document.querySelector(".hero-galaxy");
galaxyElement.addEventListener("mouseenter", () => {
    galaxy.pause();
});
galaxyElement.addEventListener("mouseleave", () => {
    galaxy.resume();
});

// Hero star blinking animation
const heroStar = document.querySelectorAll('.hero-star');
const blink = (star) => {
    return gsap.fromTo(star, { opacity: 1 },
        {
            opacity: 0,
            duration: 0.2,
            repeat: -1,
            yoyo: true,
        }
    );
};
const heroStaggerStar = () => {
    heroStar.forEach((star, index) => {
        gsap.fromTo(star, { opacity: 0 },
            {
                opacity: 1,
                duration: 0.5,
                ease: 'back.out',
                delay: 4 + index * 1,
                onComplete: () => {
                    blink(star);
                },
            }
        );
    });
};
heroStaggerStar();

// All stars blinking animation
const stars = document.querySelectorAll('.stars');
const blinks = (star) => {
    return gsap.fromTo(star, { opacity: 1 },
        {
            opacity: 0,
            duration: 0.2,
            repeat: -1,
            yoyo: true,
        }
    );
};
const staggerStars = () => {
    stars.forEach((star, index) => {
        gsap.fromTo(star, { opacity: 0 },
            {
                opacity: 1,
                duration: 0.5,
                ease: 'back.out',
                delay: 1 + index * 1,
                onComplete: () => {
                    blinks(star);
                },
            }
        );
    });
};
staggerStars();

// All section heading animation
const createSplits = () => {
    const headings = document.querySelectorAll(".section-heading");
    headings.forEach((heading) => {
        if (heading.motion) {
            heading.motion.progress(1).kill();
            heading.split.revert();
        }
        heading.split = new SplitText(heading, {
            type: "lines,words,chars",
            linesClass: "split-lines",
        });
        heading.motion = gsap.from(heading.split.chars, {
            scrollTrigger: {
                trigger: heading,
                toggleActions: "restart pause resume reverse",
                start: "top 80%",
                end: "bottom top",
            },
            y: "0%",
            color: "rgba(255, 255, 255, 0.2)",
            duration: 0.02,
            rotationX: 0,
            ease: "none",
            stagger: {
                amount: 0.8,
                from: "start",
            },
        });
    });
};
ScrollTrigger.addEventListener("refresh", () => {
    createSplits();
});
createSplits();

// Introduction section animation
const introSection = gsap.timeline({
    scrollTrigger: {
        trigger: ".intro-section",
        toggleActions: "restart pause resume reverse",
        start: "top 150%",
        end: "bottom top",
        scrub: 1
    }
});
introSection.from(".intro-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
introSection.from(".intro-section .section-heading, .intro-section .section-subheading", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");
introSection.from(".intro-section .intro-pattern", {
    duration: 1,
    opacity: 0,
    scale: 0.5,
    rotation: 360,
    ease: "back.out(1.7)"
}, "<");

// Rules section animation
const rules = gsap.timeline({
    scrollTrigger: {
        trigger: ".rules-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
rules.from(".rules-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
rules.from(".rules-section .section-heading, .rules-section .section-subheading", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");
rules.from(".rules-section .rules-pattern", {
    duration: 1,
    opacity: 0,
    scale: 0.5,
    rotation: 360,
    ease: "back.out(1.7)"
}, "<");

// Criteria section animation
const criteriaSection = gsap.timeline({
    scrollTrigger: {
        trigger: ".criteria-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
criteriaSection.from(".criteria-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
criteriaSection.from(".criteria-section .section-heading, .criteria-section .criteria-stagger", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");
const criteriaButton = gsap.timeline({
    scrollTrigger: {
        trigger: ".criteria-section",
        toggleActions: "restart pause resume reverse",
        start: "top center",
        end: "bottom center",
        scrub: 1
    }
});
criteriaButton.from(".criteria-section .btn-primary", {
    duration: 1,
    opacity: 0,
    x: 50,
    ease: "power2.inOut",
});

// FAQs section animation
const faqsSection = gsap.timeline({
    scrollTrigger: {
        trigger: ".faqs-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
faqsSection.from(".faqs-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
faqsSection.from(".faqs-section .section-heading, .faqs-section .faqs-stagger, .faqs-section .accordion-item", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");

// Timeline section animation
const timelineSection = gsap.timeline({
    scrollTrigger: {
        trigger: ".timeline-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
timelineSection.from(".timeline-section .xl-timeline", {
    duration: 2,
    opacity: 0,
    y: 50,
    ease: "power2.inOut"
});
timelineSection.from(".timeline-section .section-heading, .timeline-section .section-subheading, .timeline-section .md-timeline", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");

// Rewards section animation
const rewards = gsap.timeline({
    scrollTrigger: {
        trigger: ".rewards-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
rewards.from(".rewards-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
rewards.from(".rewards-section .section-heading, .rewards-section .section-subheading", {
    duration: 1,
    opacity: 0,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");
rewards.from(".rewards-section .has-runner, .rewards-section .has-winner", {
    duration: 1,
    opacity: 0,
    y: 50,
    ease: "power2.inOut",
    stagger: {
        each: 0.3,
        from: "start"
    }
}, "<");

// Partners section animation
const partners = gsap.timeline({
    scrollTrigger: {
        trigger: ".partners-section",
        toggleActions: "restart pause resume reverse",
        start: "top 100%",
        end: "bottom center",
        scrub: 1
    }
});
partners.from(".partners-section .section-heading, .partners-section .section-subheading", {
    duration: 1,
    opacity: 0,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");
partners.from(".partners-section .partners-content", {
    duration: 1,
    opacity: 0,
    scale: 0.8,
    ease: "power2.inOut"
}, "<");
partners.from(".partners-section .illustration", {
    duration: 1,
    opacity: 0,
    ease: "power2.inOut"
}, "<");

// Privacy section animation
const privacySection = gsap.timeline({
    scrollTrigger: {
        trigger: ".privacy-section",
        toggleActions: "restart pause resume reverse",
        start: "top 150%",
        end: "bottom center",
        scrub: 1
    }
});
privacySection.from(".privacy-section .illustration", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
privacySection.from(".privacy-section .section-heading, .privacy-section .section-subheading, .privacy-section .privacy-text, .privacy-section .privacy-content", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");

// Footer section animation
const footerStar = document.querySelectorAll('.footer-star');
const blinkx = (star) => {
    return gsap.fromTo(star, { opacity: 1 },
        {
            opacity: 0,
            duration: 0.2,
            repeat: -1,
            yoyo: true,
        }
    );
};
const footerStaggerStar = () => {
    footerStar.forEach((star, index) => {
        gsap.fromTo(star, { opacity: 0 },
            {
                opacity: 1,
                duration: 0.5,
                ease: 'back.out',
                delay: 1 + index * 1,
                onComplete: () => {
                    blinkx(star);
                },
            }
        );
    });
};
footerStaggerStar();

// Function to update the countdown
const targetDate = new Date('2023-12-31T23:59:59').getTime();
const updateCountdown = () => {
    const now = new Date().getTime();
    const timeRemaining = targetDate - now;
    if (timeRemaining > 0) {
        const hours = String(Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0');
        const minutes = String(Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');
        const seconds = String(Math.floor((timeRemaining % (1000 * 60)) / 1000)).padStart(2, '0');
        document.getElementById('hours').textContent = hours;
        document.getElementById('minutes').textContent = minutes;
        document.getElementById('seconds').textContent = seconds;
    } else {
        document.getElementById('hours').textContent = '00';
        document.getElementById('minutes').textContent = '00';
        document.getElementById('seconds').textContent = '00';
    }
};
setInterval(updateCountdown, 1000);
updateCountdown();

// Particles animation
const pop = (e) => {
    const amount = 10;
    const x = e.clientX;
    const y = e.clientY;

    for (let i = 0; i < amount; i++) {
        createParticle(x, y);
    }
};

const createParticle = (x, y) => {
    const particle = document.createElement("div");
    particle.className = "particle";
    document.body.appendChild(particle);

    // Replace with your SVG path
    particle.style.backgroundImage = "url('assets/images/svg/star-white.svg')";
    particle.style.backgroundSize = 'contain';
    particle.style.backgroundRepeat = 'no-repeat';

    const size = Math.floor(Math.random() * 32 + 8); // Adjust size range
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;

    const destinationX = x + (Math.random() - 0.5) * 500;
    const destinationY = y + (Math.random() - 0.5) * 500;

    const rotation = Math.random() * 500;
    const delay = Math.random() * 200;

    gsap.fromTo(
        particle,
        {
            x,
            y,
            rotation: 0,
            opacity: 1,
        },
        {
            x: destinationX,
            y: destinationY,
            rotation,
            opacity: 0,
            duration: Math.random() * 4 + 1, // Random duration between 1 and 5 seconds
            ease: 'power4.out',
            delay: delay / 1000, // Convert delay to seconds
            onComplete: () => particle.remove(),
        }
    );
};

if (document.body.animate) {
    document.body.addEventListener('click', pop);
}

// Cursor animation
const cursor = document.getElementById("cursor");
const cursorEffect = (e) => {
    cursor.style.top = `${e.clientY}px`;
    cursor.style.left = `${e.clientX}px`;
    const element = document.createElement("div");
    element.className = "element";
    document.body.prepend(element);
    element.style.left = `${e.pageX}px`;
    element.style.top = `${e.pageY - 10}px`;
    setTimeout(() => {
        const text = document.querySelectorAll(".element")[0];
        const directionX = Math.random() < 0.5 ? -1 : 1;
        const directionY = Math.random() < 0.5 ? -1 : 1;
        text.style.left = `${parseInt(text.style.left) - directionX * (Math.random() * 200)}px`;
        text.style.top = `${parseInt(text.style.left) - directionY * (Math.random() * 200)}px`;
        text.style.opacity = 0;
        text.style.transform = "scale(0.25)";
        text.innerHTML = randomText();
    }, 10);
    setTimeout(() => {
        element.remove();
    }, 1000);
};
const randomText = () => {
    const text = "oocooocococococ".split("");
    const letter = text[Math.floor(Math.random() * text.length)];
    return letter;
};
document.addEventListener("mousemove", cursorEffect);

// Pointer animation
const pointer = document.getElementById("pointer");
const isCursor = (event) => {
    gsap.to(pointer, {
        duration: 0.2,
        x: event.clientX,
        y: event.clientY,
        ease: "power2.out"
    });
};
window.addEventListener("mousemove", isCursor);
Array.from(document.querySelectorAll(".hover")).forEach(el => {
    el.addEventListener('mouseover', (event) => {
        cursor.style.display = "none";
        event.stopPropagation();
        gsap.to(pointer, {
            duration: 0.2,
            scale: 5,
            backgroundColor: "#ffffff",
            mixBlendMode: "difference",
            ease: "power2.out"
        });
    });
    el.addEventListener('mouseleave', (event) => {
        cursor.style.display = "block";
        event.stopPropagation();
        gsap.to(pointer, {
            duration: 0.2,
            scale: 0,
            ease: "power2.out"
        });
    });
});

// Get the current year
const year = new Date().getFullYear();
document.getElementById("year").innerHTML = year;

console.clear();
console.log.apply(console, [
    "%c Developed by Olawalemi %c %c👌 %c",
    "color: #fff; background: #0d60d8; padding: 5px 0;",
    "color: #fff; background: #0c1825; padding: 5px 0 5px 5px;",
    "background: #0c1825; padding: 5px 0",
    "background: #0c1825; padding: 5px 5px 5px 0",
]);