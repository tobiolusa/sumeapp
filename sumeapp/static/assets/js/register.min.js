/*-----------------------------------------------------------------------------------
    Template Name: Getlinked
    Template URI: https://github.com/theolawalemi
    Description: Igniting a revolution in HR innovation.
    Author: Olwalemi
    Author URI: https://github.com/theolawalemi
    Version: 1.0
-----------------------------------------------------------------------------------*/
// API Connection
const baseUrl = "https://backend.getlinked.ai";
const registerForm = document.getElementById("registerData");
const alertWrapper = document.getElementById("alert-message");

async function submitRegistrationForm(e) {
    e.preventDefault();
    try {
        const formData = new FormData(registerForm);
        const requestBody = {
            email: formData.get("email"),
            phone_number: formData.get("phone_number"),
            team_name: formData.get("team_name"),
            group_size: formData.get("group_size"),
            project_topic: formData.get("project_topic"),
            category: await fetchCategory(formData.get("category")),
            privacy_policy_accepted: formData.get("privacy_policy_accepted"),
        };
        console.log(requestBody);
        const jsonData = JSON.stringify(requestBody);
        const url = `${baseUrl}/hackathon/registration`;
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: jsonData,
        });
        if (!response.ok) {
            throw new Error("Something went wrong.");
        }
        const data = await response.json();
        showModal();
        console.log(data);
    } catch (error) {
        showError(error.message);
    }
}
async function fetchCategory(categoryName) {
    try {
        const url = `${baseUrl}/hackathon/categories-list`;
        const res = await fetch(url);
        if (!res.ok) {
            throw new Error("Unable to fetch categories.");
        }
        const data = await res.json();
        const category = data.find((item) => item.name === categoryName);
        if (!category) {
            throw new Error(`Category "${categoryName}" not found.`);
        }
        return category.id;
    } catch (error) {
        throw new Error("Something went wrong: " + error.message);
    }
}
function showError(message) {
    alertWrapper.innerHTML = `<div class="alertError" style="margin-top: -1.5rem; padding-bottom: 2rem">${message}</div>`;
}
function showModal() {
    const modal = new bootstrap.Modal(document.getElementById("registerForm"));
    modal.show();
}
registerForm.addEventListener("submit", submitRegistrationForm);

// Navbar background
const toggler = document.querySelector(".navbar-toggler");
const navbar = document.querySelector(".navbar");
const [navbarOpen, navbarClose] = document.querySelectorAll(".navbar-open, .navbar-close");
navbarClose.style.display = "none";
toggler.addEventListener("click", () => {
    navbar.classList.toggle("navbar-bg");
    navbarOpen.style.display = navbarOpen.style.display === "none" ? "inline-block" : "none";
    navbarClose.style.display = navbarClose.style.display === "none" ? "inline-block" : "none";
});
  
// Hero section animation
gsap.registerPlugin('random');

gsap.from(".header .navbar-brand", {
    duration: 1,
    opacity: 0,
    y: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
gsap.from(".header .nav-link", {
    duration: 1,
    opacity: 0,
    x: -100,
    ease: "power2.inOut",
    stagger: {
        each: 0.25,
        from: "start"
    }
});
gsap.from(".header .btn-navbar", {
    duration: 1,
    opacity: 0,
    x: 50,
    ease: "power2.inOut",
}, "<");

// Registration section animation
gsap.from(".register-section .register-img", {
    duration: 1.5,
    opacity: 0,
    x: () => gsap.utils.random(-50, 50),
    ease: "power2.inOut"
});
gsap.from(".register-section .section-heading, .register-section .register-stagger", {
    duration: 1,
    opacity: 0,
    y: 50,
    stagger: 0.2,
    ease: "power2.inOut"
}, "<");

// All stars blinking animation
const stars = document.querySelectorAll('.stars');
const blinks = (star) => {
    return gsap.fromTo(star, { opacity: 1 },
        {
            opacity: 0,
            duration: 0.2,
            repeat: -1,
            yoyo: true,
        }
    );
};
const staggerStars = () => {
    stars.forEach((star, index) => {
        gsap.fromTo(star, { opacity: 0 },
            {
                opacity: 1,
                duration: 0.5,
                ease: 'back.out',
                delay: 1 + index * 1,
                onComplete: () => {
                    blinks(star);
                },
            }
        );
    });
};
staggerStars();

// Footer section animation
const footerStar = document.querySelectorAll('.footer-star');
const blinkx = (star) => {
    return gsap.fromTo(star, { opacity: 1 },
        {
            opacity: 0,
            duration: 0.2,
            repeat: -1,
            yoyo: true,
        }
    );
};
const footerStaggerStar = () => {
    footerStar.forEach((star, index) => {
        gsap.fromTo(star, { opacity: 0 },
            {
                opacity: 1,
                duration: 0.5,
                ease: 'back.out',
                delay: 1 + index * 1,
                onComplete: () => {
                    blinkx(star);
                },
            }
        );
    });
};
footerStaggerStar();

// Particles animation
const pop = (e) => {
    const amount = 10;
    const x = e.clientX;
    const y = e.clientY;

    for (let i = 0; i < amount; i++) {
        createParticle(x, y);
    }
};

const createParticle = (x, y) => {
    const particle = document.createElement("div");
    particle.className = "particle";
    document.body.appendChild(particle);

    // Replace with your SVG path
    particle.style.backgroundImage = "url('assets/images/svg/star-white.svg')";
    particle.style.backgroundSize = 'contain';
    particle.style.backgroundRepeat = 'no-repeat';

    const size = Math.floor(Math.random() * 32 + 8); // Adjust size range
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;

    const destinationX = x + (Math.random() - 0.5) * 500;
    const destinationY = y + (Math.random() - 0.5) * 500;

    const rotation = Math.random() * 500;
    const delay = Math.random() * 200;

    gsap.fromTo(
        particle,
        {
            x,
            y,
            rotation: 0,
            opacity: 1,
        },
        {
            x: destinationX,
            y: destinationY,
            rotation,
            opacity: 0,
            duration: Math.random() * 4 + 1, // Random duration between 1 and 5 seconds
            ease: 'power4.out',
            delay: delay / 1000, // Convert delay to seconds
            onComplete: () => particle.remove(),
        }
    );
};

if (document.body.animate) {
    document.body.addEventListener('click', pop);
}

// Cursor animation
const cursor = document.getElementById("cursor");
const cursorEffect = (e) => {
    cursor.style.top = `${e.clientY}px`;
    cursor.style.left = `${e.clientX}px`;
    const element = document.createElement("div");
    element.className = "element";
    document.body.prepend(element);
    element.style.left = `${e.pageX}px`;
    element.style.top = `${e.pageY - 10}px`;
    setTimeout(() => {
        const text = document.querySelectorAll(".element")[0];
        const directionX = Math.random() < 0.5 ? -1 : 1;
        const directionY = Math.random() < 0.5 ? -1 : 1;
        text.style.left = `${parseInt(text.style.left) - directionX * (Math.random() * 200)}px`;
        text.style.top = `${parseInt(text.style.left) - directionY * (Math.random() * 200)}px`;
        text.style.opacity = 0;
        text.style.transform = "scale(0.25)";
        text.innerHTML = randomText();
    }, 10);
    setTimeout(() => {
        element.remove();
    }, 1000);
};
const randomText = () => {
    const text = "oocooocococococ".split("");
    const letter = text[Math.floor(Math.random() * text.length)];
    return letter;
};
document.addEventListener("mousemove", cursorEffect);

// Pointer animation
const pointer = document.getElementById("pointer");
const isCursor = (event) => {
    gsap.to(pointer, {
        duration: 0.2,
        x: event.clientX,
        y: event.clientY,
        ease: "power2.out"
    });
};
window.addEventListener("mousemove", isCursor);
Array.from(document.querySelectorAll(".hover")).forEach(el => {
    el.addEventListener('mouseover', (event) => {
        cursor.style.display = "none";
        event.stopPropagation();
        gsap.to(pointer, {
            duration: 0.2,
            scale: 5,
            backgroundColor: "#ffffff",
            mixBlendMode: "difference",
            ease: "power2.out"
        });
    });
    el.addEventListener('mouseleave', (event) => {
        cursor.style.display = "block";
        event.stopPropagation();
        gsap.to(pointer, {
            duration: 0.2,
            scale: 0,
            ease: "power2.out"
        });
    });
});

console.clear();
console.log.apply(console, [
    "%c Developed by Olawalemi %c %cðŸ‘Œ %c",
    "color: #fff; background: #0d60d8; padding: 5px 0;",
    "color: #fff; background: #0c1825; padding: 5px 0 5px 5px;",
    "background: #0c1825; padding: 5px 0",
    "background: #0c1825; padding: 5px 5px 5px 0",
]);

// A modern approach to modify phone number
const phone = document.getElementById("userPhone");
phone.addEventListener("input", () => {
    phone.value = phone.value.replace(/[^0-9+]/g, '');
});